// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Persistence.data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250211104037_SeedReworked2")]
    partial class SeedReworked2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Core.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("API.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f4a5b6c-7d8e-4f4a-5b6c-7d8e4f4a5b6c"),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("7e8f9a0b-1c2d-4e8f-9a0b-1c2d4e8f9a0b"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("API.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f42b3e7d-9c5a-4b1f-8b3e-7d9c5a4b1f8b"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsBanned = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDKeGlx3GBKx0sij9+aGvKW5q/BWYLB7jeyWhYFavnz8MM8Kb0KO6wXnuEhwKwA3Qw==",
                            Username = "moder1"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4a1b-2c3d-4e5f6a1b2c3d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsBanned = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFf8EZDaZNR9N5r66K5zpnbJ2lY3Ud4jPfj47A0gHBXY/wuAbbB5y2cM5aVsmlIcMQ==",
                            Username = "moder2"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("3f4a5b6c-7d8e-4f4a-5b6c-7d8e4f4a5b6c"),
                            UsersId = new Guid("f42b3e7d-9c5a-4b1f-8b3e-7d9c5a4b1f8b")
                        },
                        new
                        {
                            RolesId = new Guid("3f4a5b6c-7d8e-4f4a-5b6c-7d8e4f4a5b6c"),
                            UsersId = new Guid("a1b2c3d4-e5f6-4a1b-2c3d-4e5f6a1b2c3d")
                        });
                });

            modelBuilder.Entity("API.Core.Models.Note", b =>
                {
                    b.HasOne("API.Core.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("API.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Core.Models.User", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
